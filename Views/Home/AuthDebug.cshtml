@{
    ViewData["Title"] = "Auth Debug";
}

<div class="container mt-5">
    <h1>Authentication Debugger</h1>
    
    <div class="card mb-4">
        <div class="card-header">
            <h2>Current Authentication Status</h2>
        </div>
        <div class="card-body">
            <p>Is Authenticated: <strong id="isAuthenticated">Checking...</strong></p>
            <p>User Identity: <strong id="userIdentity">Checking...</strong></p>
            <p>User ID: <strong id="userId">Checking...</strong></p>
        </div>
    </div>
    
    <div class="card mb-4">
        <div class="card-header">
            <h2>JWT Token</h2>
        </div>
        <div class="card-body">
            <div class="mb-3">
                <button id="checkToken" class="btn btn-primary">Check LocalStorage Token</button>
                <button id="validateToken" class="btn btn-info">Validate Token</button>
            </div>
            <div class="mb-3">
                <label for="tokenInfo" class="form-label">Token Info:</label>
                <pre id="tokenInfo" class="border p-3 bg-light">No token info available</pre>
            </div>
        </div>
    </div>
    
    <div class="card mb-4">
        <div class="card-header">
            <h2>Cookie Status</h2>
        </div>
        <div class="card-body">
            <div class="mb-3">
                <button id="checkCookies" class="btn btn-primary">Check Cookies</button>
                <button id="setCookie" class="btn btn-success">Set JWT Cookie from LocalStorage</button>
            </div>
            <div class="mb-3">
                <label for="cookieInfo" class="form-label">Cookie Info:</label>
                <pre id="cookieInfo" class="border p-3 bg-light">No cookie info available</pre>
            </div>
        </div>
    </div>
    
    <div class="card mb-4">
        <div class="card-header">
            <h2>Test Protected Endpoints</h2>
        </div>
        <div class="card-body">
            <div class="mb-3">
                <button id="testMySets" class="btn btn-primary">Test MySets</button>
                <button id="testProtected" class="btn btn-warning">Test Protected API</button>
                <button id="testDebugApi" class="btn btn-info">Test Auth Debug API</button>
            </div>
            <div class="mb-3">
                <label for="testResult" class="form-label">Test Result:</label>
                <pre id="testResult" class="border p-3 bg-light">No test results yet</pre>
            </div>
        </div>
    </div>
    
    <div class="card mb-4">
        <div class="card-header">
            <h2>Navigation Tests</h2>
        </div>
        <div class="card-body">
            <div class="mb-3">
                <p><strong>Test MySets Navigation:</strong></p>
                <button id="testMySetsQuery" class="btn btn-primary">MySets with Query Param</button>
                <button id="testMySetsHandler" class="btn btn-secondary">MySets with handleProtectedLink()</button>
                <button id="testNavigationTool" class="btn btn-info">Open Navigation Test Tool</button>
            </div>
        </div>
    </div>
    
    <div class="card mb-4">
        <div class="card-header">
            <h2>User and Claims Debugging</h2>
        </div>
        <div class="card-body">
            <div class="mb-3">
                <button id="checkUserId" class="btn btn-warning">Check User ID From Token</button>
            </div>
            <div class="mb-3">
                <label for="userDebugInfo" class="form-label">User Debug Information:</label>
                <pre id="userDebugInfo" class="border p-3 bg-light">No user debug info available</pre>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", function() {
            // Check authentication status
            updateAuthStatus();
            
            // Button event handlers
            document.getElementById("checkToken").addEventListener("click", checkToken);
            document.getElementById("validateToken").addEventListener("click", validateToken);
            document.getElementById("checkCookies").addEventListener("click", checkCookies);
            document.getElementById("setCookie").addEventListener("click", setCookie);
            document.getElementById("testMySets").addEventListener("click", testMySets);
            document.getElementById("testProtected").addEventListener("click", testProtected);
            document.getElementById("testDebugApi").addEventListener("click", testDebugApi);
            document.getElementById("testMySetsQuery").addEventListener("click", testMySetsQuery);
            document.getElementById("testMySetsHandler").addEventListener("click", testMySetsHandler);
            document.getElementById("testNavigationTool").addEventListener("click", openNavigationTestTool);
            document.getElementById("checkUserId").addEventListener("click", checkUserIdFromToken);
        });
        
        function updateAuthStatus() {
            // Check if getUserInfoFromToken exists (from jwt-handler.js)
            if (typeof window.getUserInfoFromToken === 'function') {
                const userInfo = window.getUserInfoFromToken();
                document.getElementById("isAuthenticated").innerText = userInfo ? "Yes" : "No";
                document.getElementById("userIdentity").innerText = userInfo ? userInfo.username : "None";
                document.getElementById("userId").innerText = userInfo ? userInfo.userId : "None";
            } else {
                document.getElementById("isAuthenticated").innerText = "Unknown (jwt-handler.js not loaded)";
                document.getElementById("userIdentity").innerText = "Unknown";
                document.getElementById("userId").innerText = "Unknown";
            }
        }
        
        function checkToken() {
            const token = localStorage.getItem("token");
            const tokenBackup = localStorage.getItem("jwtBackup");
            
            if (!token) {
                document.getElementById("tokenInfo").innerText = "No JWT token found in localStorage";
                return;
            }
            
            try {
                // Parse token without verification
                const base64Url = token.split('.')[1];
                const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
                const jsonPayload = decodeURIComponent(atob(base64).split('').map(function(c) {
                    return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
                }).join(''));

                const claims = JSON.parse(jsonPayload);
                
                let tokenInfo = `Token found in localStorage:\n`;
                tokenInfo += `Preview: ${token.substring(0, 20)}...\n\n`;
                tokenInfo += `Claims:\n${JSON.stringify(claims, null, 2)}\n\n`;
                
                if (tokenBackup) {
                    tokenInfo += `Token backup found: ${tokenBackup.substring(0, 20)}...\n`;
                }
                
                document.getElementById("tokenInfo").innerText = tokenInfo;
            } catch (e) {
                document.getElementById("tokenInfo").innerText = `Error parsing token: ${e.message}\n\nRaw token: ${token}`;
            }
        }
        
        function validateToken() {
            if (typeof window.validateJwtToken === 'function') {
                const isValid = window.validateJwtToken();
                document.getElementById("tokenInfo").innerText = `Token validation result: ${isValid ? "Valid" : "Invalid"}`;
            } else {
                document.getElementById("tokenInfo").innerText = "validateJwtToken function not available (jwt-handler.js not loaded)";
            }
        }
        
        function checkCookies() {
            const cookies = document.cookie.split(';');
            let cookieInfo = `All cookies:\n`;
            
            if (cookies.length === 1 && cookies[0] === "") {
                cookieInfo += "No cookies found";
            } else {
                cookies.forEach(cookie => {
                    cookieInfo += `${cookie.trim()}\n`;
                });
            }
            
            const jwtCookie = cookies.find(c => c.trim().startsWith("jwt="));
            if (jwtCookie) {
                cookieInfo += `\nJWT cookie found: ${jwtCookie.trim().substring(4, 24)}...`;
            } else {
                cookieInfo += `\nNo JWT cookie found`;
            }
            
            document.getElementById("cookieInfo").innerText = cookieInfo;
        }
        
        function setCookie() {
            const token = localStorage.getItem("token");
            if (!token) {
                document.getElementById("cookieInfo").innerText = "No token in localStorage to set as cookie";
                return;
            }
            
            const isLocalhost = window.location.hostname === 'localhost' || 
                               window.location.hostname === '127.0.0.1';
            const secureFlag = isLocalhost ? '' : '; Secure';
            const domain = isLocalhost ? '; domain=localhost' : '';
            const expires = '; expires=' + new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toUTCString();
            
            document.cookie = 'jwt=' + token + expires + '; path=/; SameSite=Lax' + secureFlag + domain;
            
            setTimeout(() => {
                checkCookies();
            }, 100);
        }
        
        function testMySets() {
            document.getElementById("testResult").innerText = "Testing MySets endpoint...";
            
            fetch('/FlashcardsView/MySets', {
                headers: {
                    'Authorization': `Bearer ${localStorage.getItem("token")}`
                },
                credentials: 'include'
            })
            .then(response => {
                if (response.redirected) {
                    document.getElementById("testResult").innerText = `Redirected to: ${response.url}\n\nThis usually means authentication failed.`;
                } else if (!response.ok) {
                    return response.text().then(text => {
                        document.getElementById("testResult").innerText = `Failed with status: ${response.status}\n\n${text}`;
                    });
                } else {
                    return response.text().then(text => {
                        const title = text.match(/<title>(.*?)<\/title>/i);
                        document.getElementById("testResult").innerText = `Success! Response status: ${response.status}\n\nPage title: ${title ? title[1] : "Unknown"}\n\nThis indicates authentication was successful.`;
                    });
                }
            })
            .catch(error => {
                document.getElementById("testResult").innerText = `Error: ${error.message}`;
            });
        }
        
        function testProtected() {
            document.getElementById("testResult").innerText = "Testing protected API endpoint...";
            
            fetch('/api/AuthDebug/protected', {
                headers: {
                    'Authorization': `Bearer ${localStorage.getItem("token")}`
                },
                credentials: 'include'
            })
            .then(response => response.json())
            .then(data => {
                document.getElementById("testResult").innerText = JSON.stringify(data, null, 2);
            })
            .catch(error => {
                document.getElementById("testResult").innerText = `Error: ${error.message}`;
            });
        }
        
        function testDebugApi() {
            document.getElementById("testResult").innerText = "Testing AuthDebug API...";
            
            fetch('/api/AuthDebug/test', {
                headers: {
                    'Authorization': `Bearer ${localStorage.getItem("token")}`
                },
                credentials: 'include'
            })
            .then(response => response.json())
            .then(data => {
                document.getElementById("testResult").innerText = JSON.stringify(data, null, 2);
            })
            .catch(error => {
                document.getElementById("testResult").innerText = `Error: ${error.message}`;
            });
        }
        
        function testMySetsQuery() {
            const token = localStorage.getItem("token");
            if (!token) {
                document.getElementById("testResult").innerText = "No token found in localStorage";
                return;
            }
            
            // Navigate to MySets with token as query parameter
            const url = '/FlashcardsView/MySets?token=' + encodeURIComponent(token);
            document.getElementById("testResult").innerText = "Navigating to: " + url;
            window.location.href = url;
        }
        
        function testMySetsHandler() {
            if (typeof window.handleProtectedLink !== 'function') {
                document.getElementById("testResult").innerText = "handleProtectedLink function not available. Make sure jwt-handler.js is included properly.";
                return;
            }
            
            document.getElementById("testResult").innerText = "Using handleProtectedLink to navigate to /FlashcardsView/MySets";
            window.handleProtectedLink('/FlashcardsView/MySets');
        }
        
        function openNavigationTestTool() {
            window.open('/api/AuthDebug/test-navigation', '_blank');
        }
          function checkUserIdFromToken() {
            const token = localStorage.getItem("token");
            if (!token) {
                document.getElementById("userDebugInfo").innerText = "No JWT token found in localStorage";
                return;
            }
            
            try {
                // Parse token
                const base64Url = token.split('.')[1];
                const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
                const jsonPayload = decodeURIComponent(atob(base64).split('').map(function(c) {
                    return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
                }).join(''));

                const claims = JSON.parse(jsonPayload);
                
                // Extract user ID and info
                const userId = claims.nameid;
                const username = claims.unique_name || claims.name;
                const email = claims.email;
                const role = claims.role;
                
                // Build debug info
                let debugInfo = "User ID Analysis:\n";
                debugInfo += `Raw User ID from token: ${userId}\n`;
                debugInfo += `Username: ${username}\n`;
                debugInfo += `Email: ${email}\n`;
                debugInfo += `Role: ${role}\n\n`;
                
                debugInfo += "Raw Claims:\n";
                debugInfo += JSON.stringify(claims, null, 2);
                
                document.getElementById("userDebugInfo").innerText = debugInfo;
                
                // Also add a check for MySets route
                fetch(`/FlashcardsView/MySets?userId=${userId}`, {
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                }).then(response => {
                    debugInfo += `\n\nTest request to MySets returned: ${response.status} ${response.statusText}`;
                    document.getElementById("userDebugInfo").innerText = debugInfo;
                }).catch(error => {
                    debugInfo += `\n\nTest request to MySets failed: ${error}`;
                    document.getElementById("userDebugInfo").innerText = debugInfo;
                });
                
            } catch (e) {
                document.getElementById("userDebugInfo").innerText = `Error analyzing token: ${e.message}`;
            }
        }
    </script>
}
