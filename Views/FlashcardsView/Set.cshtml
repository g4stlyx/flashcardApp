@model flashcardApp.Models.FlashcardSet
@{
    ViewData["Title"] = Model.Title;
}

<div class="container mt-4">
    <div class="row">
        <!-- Set Details -->
        <div class="col-md-4">
            <div class="card mb-4">
                @if (!string.IsNullOrEmpty(Model.CoverImageUrl))
                {
                    <img src="@Model.CoverImageUrl" class="card-img-top" alt="@Model.Title" style="height: 180px; object-fit: cover;">
                }
                else
                {
                    <div class="card-img-top bg-secondary text-white d-flex align-items-center justify-content-center" style="height: 180px;">
                        <i class="bi bi-card-heading" style="font-size: 3rem;"></i>
                    </div>
                }
                <div class="card-body" data-set-owner-id="@Model.UserId">
                    <h2 class="card-title">@Model.Title</h2>
                    <p class="card-text">@Model.Description</p>
                    <div class="mb-3">
                        <strong>Sahibi:</strong> @Model.User.Username<br />
                        <strong>Oluşturulma Tarihi:</strong> @Model.CreatedAt.ToString("MMM dd, yyyy")<br />
                        <strong>Kartlar:</strong> @Model.Flashcards.Count<br />
                        <strong>Görünürlük:</strong> 
                        <span class="badge @(Model.Visibility == Visibility.Public ? "bg-success" : 
                                           Model.Visibility == Visibility.Friends ? "bg-info" : "bg-secondary")">
                            @Model.Visibility
                        </span>
                    </div>
                    <div class="d-grid gap-2">
                        <a asp-action="Study" asp-route-id="@Model.Id" class="btn btn-success">Seti Çalış</a>
                        <a id="editSetButton" style="display: none;" href="/FlashcardsView/Edit/@Model.Id" class="btn btn-outline-primary">Seti düzenle</a>
                    </div>
                </div>
            </div>
        </div>

        <!-- Flashcards -->
        <div class="col-md-8">
            <h3>Kartlar</h3>
            <div class="row">
                @foreach (var flashcard in Model.Flashcards)
                {
                    <div class="col-md-6 mb-3">
                        <div class="card h-100">
                            <div class="card-body">
                                <h5 class="card-title">@flashcard.Term</h5>
                                <hr />
                                <p class="card-text">@flashcard.Definition</p>
                                @if (!string.IsNullOrEmpty(flashcard.ExampleSentence))
                                {
                                    <p class="card-text text-muted"><em>Örnek: @flashcard.ExampleSentence</em></p>
                                }
                                @if (!string.IsNullOrEmpty(flashcard.ImageUrl))
                                {
                                    <img src="@flashcard.ImageUrl" class="img-fluid mt-2" alt="@flashcard.Term" style="max-height: 150px;">
                                }
                            </div>
                        </div>
                    </div>
                }
            </div>
            @if (!Model.Flashcards.Any())
            {
                <div class="alert alert-info">
                    Bu set henüz hiç kart içermiyor.
                    <a id="emptySetEditButton" style="display: none;" href="/FlashcardsView/Edit/@Model.Id">Hemen Ekle!</a>
                </div>
            }
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/js/set-page-handler.js"></script>
    <script src="~/js/admin-handler.js"></script>
    <script src="~/js/delete-set-handler.js"></script>
    <script>
        // Local implementation of navigateWithToken in case admin-handler.js isn't loaded
        function localNavigateWithToken(url, params = {}) {
            const token = localStorage.getItem('token');
            if (!token) {
                console.error("No token available for navigation");
                return;
            }
            
            // Build the URL with parameters
            let finalUrl = url;
            const queryParams = new URLSearchParams();
            
            // Add token
            queryParams.append('token', token);
            
            // Add other params
            for (const [key, value] of Object.entries(params)) {
                queryParams.append(key, value);
            }
            
            // Append query string to URL
            finalUrl += '?' + queryParams.toString();
            
            // Navigate
            console.log(`Navigating to: ${finalUrl}`);
            window.location.href = finalUrl;
        }
        
        document.addEventListener('DOMContentLoaded', function() {
            // Get token from localStorage
            const token = localStorage.getItem('token');
            if (!token) return;
            
            try {
                // Parse the JWT token
                const tokenPayload = JSON.parse(atob(token.split('.')[1]));
                
                // Get user ID from token
                const userIdFromToken = parseInt(tokenPayload.nameid);
                
                // Get set owner ID
                const setOwnerId = @Model.UserId;
                
                // Check if user is admin
                const isAdmin = tokenPayload.role === "Admin" || 
                                tokenPayload["UserType"] === "Admin" ||
                                (tokenPayload.role && Array.isArray(tokenPayload.role) && tokenPayload.role.includes("Admin"));
                                              
                // Show edit button only if user is the owner or admin
                if (userIdFromToken === setOwnerId || isAdmin) {
                    console.log('User can edit this set - showing edit buttons');
                    
                    // Main edit button
                    const editSetButton = document.getElementById('editSetButton');
                    if (editSetButton) {
                        editSetButton.style.display = 'block';
                    }
                    
                    // Empty set edit button
                    const emptySetEditButton = document.getElementById('emptySetEditButton');
                    if (emptySetEditButton) {
                        emptySetEditButton.style.display = 'inline-block';
                    }
                    
                    // Make sure the edit buttons include token when clicked
                    document.querySelectorAll('#editSetButton, #emptySetEditButton').forEach(button => {
                        button.addEventListener('click', function(e) {
                            e.preventDefault();
                            
                            // Navigate with token to ensure authentication works
                            const href = this.getAttribute('href');                            
                            if (typeof navigateWithToken === 'function') {
                                navigateWithToken(href);
                            } else {
                                // Use our local implementation
                                localNavigateWithToken(href);
                            }
                        });
                    });
                }
            } catch (err) {
                console.error('Error checking set ownership:', err);
            }
        });
    </script>
}
