@model flashcardApp.Models.FlashcardSet
@{
    ViewData["Title"] = "Set: " + Model.Title;
}

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h1>Set: @Model.Title</h1>
        <div>
            <a asp-action="Set" asp-route-id="@Model.Id" class="btn btn-outline-secondary">Sete geri dön</a>
        </div>
    </div>

    @if (!Model.Flashcards.Any())
    {
        <div class="alert alert-warning">
            Bu set henüz hiç kart içermiyor. 
            @if (User.Identity.IsAuthenticated && int.TryParse(User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value, out int userId) && userId == Model.UserId)
            {
                <a asp-action="Edit" asp-route-id="@Model.Id">Hemen ekle!</a>
            }
            else
            {
                <span>Daha sonra tekrar deneyiniz.</span>
            }
        </div>
    }
    else
    {
        <div class="row mb-4">
            <div class="col-md-8 mx-auto">
                <div class="card" id="flashcard">
                    <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                        <span>Kart <span id="currentCardIndex">1</span> of <span id="totalCards">@Model.Flashcards.Count</span></span>
                        <div>
                            <button id="shuffleBtn" class="btn btn-sm btn-light">
                                <i class="bi bi-shuffle"></i> Karıştır
                            </button>
                        </div>
                    </div>
                    <div class="card-body text-center" style="min-height: 300px;">
                        <div class="d-flex flex-column justify-content-center align-items-center h-100" id="cardFront">
                            <h3 id="termText"></h3>
                            <div id="imageContainer" class="mt-3" style="max-height: 200px; display: none;">
                                <img id="cardImage" class="img-fluid" style="max-height: 200px;">
                            </div>
                        </div>
                        <div class="d-flex flex-column justify-content-center align-items-center h-100" id="cardBack" style="display: none;">
                            <p id="definitionText" class="lead"></p>
                            <p id="exampleText" class="font-italic text-muted"></p>
                        </div>
                    </div>
                    <div class="card-footer text-center">
                        <button id="flipBtn" class="btn btn-primary">Kartı çevir</button>
                        <div class="mt-3">
                            <button id="prevBtn" class="btn btn-outline-secondary" disabled>Önceki</button>
                            <button id="nextBtn" class="btn btn-outline-secondary">Sonraki</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@section Scripts {
    <script>
        $(document).ready(function() {
            // Get flashcards data from model
            const flashcards = [
                @foreach(var card in Model.Flashcards)
                {
                    @:{ 
                    @:  id: @card.Id,
                    @:  term: "@Html.Raw(Json.Serialize(card.Term))",
                    @:  definition: "@Html.Raw(Json.Serialize(card.Definition))",
                    @:  imageUrl: "@Html.Raw(Json.Serialize(card.ImageUrl))",
                    @:  exampleSentence: "@Html.Raw(Json.Serialize(card.ExampleSentence))"
                    @:},
                }
            ];

            let currentIndex = 0;
            let isFlipped = false;
            
            // Initialize with the first card
            displayCard(currentIndex);
            
            // Flip card
            $("#flipBtn").click(function() {
                flipCard();
            });
            
            // Next card
            $("#nextBtn").click(function() {
                if (currentIndex < flashcards.length - 1) {
                    currentIndex++;
                    isFlipped = false;
                    displayCard(currentIndex);
                    updateNavButtons();
                }
            });
            
            // Previous card
            $("#prevBtn").click(function() {
                if (currentIndex > 0) {
                    currentIndex--;
                    isFlipped = false;
                    displayCard(currentIndex);
                    updateNavButtons();
                }
            });
            
            // Shuffle cards
            $("#shuffleBtn").click(function() {
                shuffleArray(flashcards);
                currentIndex = 0;
                isFlipped = false;
                displayCard(currentIndex);
                updateNavButtons();
            });
            
            function displayCard(index) {
                const card = flashcards[index];
                
                // Update term
                $("#termText").text(card.term);
                
                // Update image if available
                if (card.imageUrl) {
                    $("#cardImage").attr("src", card.imageUrl);
                    $("#imageContainer").show();
                } else {
                    $("#imageContainer").hide();
                }
                
                // Update definition
                $("#definitionText").text(card.definition);
                
                // Update example if available
                if (card.exampleSentence) {
                    $("#exampleText").text("Example: " + card.exampleSentence);
                    $("#exampleText").show();
                } else {
                    $("#exampleText").hide();
                }
                
                // Show front, hide back
                $("#cardFront").show();
                $("#cardBack").hide();
                
                // Update counter
                $("#currentCardIndex").text(index + 1);
                $("#totalCards").text(flashcards.length);
            }
            
            function flipCard() {
                if (isFlipped) {
                    $("#cardBack").hide();
                    $("#cardFront").show();
                    $("#flipBtn").text("Flip Card");
                } else {
                    $("#cardFront").hide();
                    $("#cardBack").show();
                    $("#flipBtn").text("Show Term");
                }
                isFlipped = !isFlipped;
            }
            
            function updateNavButtons() {
                $("#prevBtn").prop("disabled", currentIndex === 0);
                $("#nextBtn").prop("disabled", currentIndex === flashcards.length - 1);
            }
            
            function shuffleArray(array) {
                for (let i = array.length - 1; i > 0; i--) {
                    const j = Math.floor(Math.random() * (i + 1));
                    [array[i], array[j]] = [array[j], array[i]];
                }
            }
        });
    </script>
}
